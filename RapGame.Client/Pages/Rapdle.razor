@page "/rapdle"
@inject HttpClient Http
@using RapGame.Shared.DTOs

<h3>Rapdle</h3>

<p>Bem-vindo ao jogo de adivinhar álbuns!</p>

<p><strong>Álbum Secreto:</strong> @(albumSelecionado?.Nome ?? "Carregando...")</p>

<div class="position-relative" style="max-width: 400px;">
    <input class="form-control mb-2"
               placeholder="Digite o nome do álbum"
               @bind="Tentativa"
               @bind:event="oninput" />

    @if (!string.IsNullOrWhiteSpace(Tentativa) && sugestoes.Any())
    {
        <ul class="list-group position-absolute w-100" style="z-index:1000; max-height: 200px; overflow-y: auto;">
            @foreach (var sugestao in sugestoes)
            {
                <li class="list-group-item list-group-item-action"
                    @onclick="async () => await SelecionarSugestao(sugestao)">
                    @sugestao.Nome
                </li>
            }
        </ul>
    }
</div>

<ul class="mt-3">
    @foreach (var tentativa in Tentativas)
    {
        <li>@tentativa</li>
    }
</ul>

@if (!string.IsNullOrWhiteSpace(Mensagem))
{
    <p class="alert alert-info">@Mensagem</p>
}

@if (albuns == null)
{
    <p>Carregando álbuns...</p>
}
else
{
    <ul>
        @foreach (var album in albuns)
        {
            <li>@album.ArtistaPrincipais[0] - @album.Nome - (@album.AlbumDate.ToShortDateString())</li>
        }
    </ul>
}

@if (albumSelecionado != null)
{
    <div class="mt-3">
        <p><strong>Artista:</strong> @string.Join(", ", albumSelecionado.ArtistaPrincipais)</p>
        <p><strong>Álbum:</strong> @albumSelecionado.Nome</p>
        <p><strong>Data de Lançamento:</strong> @albumSelecionado.AlbumDateFormatted</p>
        <p><strong>Quantidade de Faixas:</strong> @albumSelecionado.QuantidadeFaixas</p>
        <p><strong>Faixa mais Popular:</strong> @albumSelecionado.FaixaMaisPopular</p>
        <p><strong>Participações:</strong> @string.Join(", ", albumSelecionado.ArtistaParticipacoes)</p>
    </div>
}

@code {
    private string _tentativa = "";
    private string Tentativa
    {
        get => _tentativa;
        set
        {
            _tentativa = value;
            BuscarAlbunsSugestao(value);
        }
    }

    private List<string> Tentativas { get; set; } = new();
    private string? Mensagem { get; set; }
    private AlbumDto? albumSelecionado;
    private List<AlbumDto> albuns = new();
    private List<AlbumDto> sugestoes = new();

    private void BuscarAlbunsSugestao(string texto)
    {
        if (albuns is null) return;

        if (!string.IsNullOrWhiteSpace(texto))
        {
            sugestoes = albuns
                .Where(a => a.Nome.Contains(texto, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            sugestoes.Clear();
        }
    }

    private async Task SelecionarSugestao(AlbumDto sugestao)
    {
        Tentativa = sugestao.Nome;
        sugestoes.Clear();
        await VerificarTentativa(); // <-- aqui está o await correto
    }

    private async Task BuscarAlbumPorId(int id)
    {
        try
        {
            var response = await Http.GetAsync($"api/album/{id}");
            if (response.IsSuccessStatusCode)
            {
                albumSelecionado = await response.Content.ReadFromJsonAsync<AlbumDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar álbum: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            albuns = await Http.GetFromJsonAsync<List<AlbumDto>>("api/Album") ?? new();
            await BuscarAlbumPorId(12);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar álbuns: {ex.Message}");
            albuns = new();
        }
    }

    private async Task VerificarTentativa()
    {
        if (string.IsNullOrWhiteSpace(Tentativa))
        {
            Mensagem = "Digite um nome antes de enviar!";
            return;
        }

        Tentativas.Add(Tentativa);

        if (albumSelecionado != null && Tentativa.Equals(albumSelecionado.Nome, StringComparison.OrdinalIgnoreCase))
        {
            Mensagem = "Você acertou!";
        }
        else
        {
            Mensagem = $"Tente novamente. Você digitou \"{Tentativa}\"";
        }

        Tentativa = "";
        await InvokeAsync(StateHasChanged);
    }
}
