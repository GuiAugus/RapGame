@page "/rapdle"
@inject HttpClient Http
@using RapGame.Shared.DTOs


<div>
    <h3>Rapdle</h3>

    <p>Bem-vindo ao jogo de adivinhar √°lbuns!</p>

    <div class="position-relative" style="max-width: 400px;">
        <input class="form-control mb-2"
            placeholder="Digite o nome do √°lbum"
            @bind="Tentativa"
            @bind:event="oninput" />

        @if (!string.IsNullOrWhiteSpace(Tentativa) && sugestoes.Any())
        {
            <ul class="list-group position-absolute w-100" style="z-index:1000; max-height: 200px; overflow-y: auto;">
                @foreach (var sugestao in sugestoes)
                {
                    <li class="list-group-item list-group-item-action"
                        @onclick="async () => await SelecionarSugestao(sugestao)">
                        @sugestao.Nome
                    </li>
                }
            </ul>
        }
    </div>

    @if (TentativasComInfo.Any())
    {
        <table class="table table-bordered mt-4 text-center">
        <thead class="table-dark">
            <tr>
                <th class="text-start">√Ålbum</th>
                <th>Artista</th>
                <th>Faixas</th>
                <th>Ano</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tentativa in TentativasComInfo)
            {
                <tr>
                    <!-- Nome do √Ålbum -->
                    <td class="@ObterClasseCor(tentativa.Nome == albumSelecionado?.Nome)">
                        @tentativa.Nome</td>

                    <!-- Artista -->
                    <td class="@ObterClasseCor(tentativa.ArtistaPrincipais[0] == albumSelecionado?.ArtistaPrincipais[0])">
                        @tentativa.ArtistaPrincipais[0]
                    </td>

                    <!-- Quantidade de Faixas -->
                    <td class="@ObterClasseCor(tentativa.QuantidadeFaixas == albumSelecionado?.QuantidadeFaixas)">
                        @tentativa.QuantidadeFaixas
                        @if (tentativa.QuantidadeFaixas != albumSelecionado?.QuantidadeFaixas)
                        {
                            <span>
                                @(tentativa.QuantidadeFaixas > albumSelecionado?.QuantidadeFaixas ? "üîΩ" : "üîº")
                            </span>
                        }
                    </td>

                    <!-- Ano -->
                    <td class="@ObterClasseCor(tentativa.AlbumDate.Year == albumSelecionado?.AlbumDate.Year)">
                        @tentativa.AlbumDate.Year
                        @if (tentativa.AlbumDate.Year != albumSelecionado?.AlbumDate.Year)
                        {
                            <span>
                                @(tentativa.AlbumDate.Year > albumSelecionado?.AlbumDate.Year ? "üîΩ" : "üîº")
                            </span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    }
</div>

@if (!string.IsNullOrWhiteSpace(Mensagem))
{
    <p class="alert alert-info">@Mensagem</p>
}


@code {
    private string _tentativa = "";
    private string Tentativa
    {
        get => _tentativa;
        set
        {
            _tentativa = value;
            BuscarAlbunsSugestao(value);
        }
    }

    private string? Mensagem { get; set; }
    private AlbumDto? albumSelecionado;
    private List<AlbumDto> albuns = new();
    private List<AlbumDto> sugestoes = new();
    private List<AlbumDto> TentativasComInfo { get; set; } = new();

    private void BuscarAlbunsSugestao(string texto)
    {
        if (!string.IsNullOrWhiteSpace(texto))
        {
            sugestoes = albuns
                .Where(a => a.Nome.Contains(texto, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            sugestoes.Clear();
        }
    }

    private async Task SelecionarSugestao(AlbumDto sugestao)
    {
        Tentativa = sugestao.Nome;
        sugestoes.Clear();
        TentativasComInfo.Insert(0, sugestao); // Nova tentativa no topo
        await VerificarTentativa(sugestao);
    }

    private async Task VerificarTentativa(AlbumDto tentativa)
    {
        if (albumSelecionado != null && tentativa.Nome.Equals(albumSelecionado.Nome, StringComparison.OrdinalIgnoreCase))
        {
            Mensagem = "Voc√™ acertou!";
        }
        else
        {
            Mensagem = $"Tente novamente. Voc√™ digitou \"{tentativa.Nome}\"";
        }

        Tentativa = "";
        await InvokeAsync(StateHasChanged);
    }

    private async Task BuscarAlbumPorId(int id)
    {
        try
        {
            var response = await Http.GetAsync($"api/album/{id}");
            if (response.IsSuccessStatusCode)
            {
                albumSelecionado = await response.Content.ReadFromJsonAsync<AlbumDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar √°lbum: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            albuns = await Http.GetFromJsonAsync<List<AlbumDto>>("api/Album") ?? new();
            await BuscarAlbumPorId(12); // Id do √°lbum secreto
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar √°lbuns: {ex.Message}");
            albuns = new();
        }
    }

    private string ObterClasseCor(bool condicao)
        => condicao ? "bg-success text-white" : "bg-danger text-white";
}
