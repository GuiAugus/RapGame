@page "/rapdle"
@inject HttpClient Http
@using RapGame.Shared.DTOs

<h3>Rapdle</h3>

<p>Bem-vindo ao jogo de adivinhar álbuns!</p>

<p><strong>Album Secreto: </strong>@AlbumSecreto</p>

<InputText @bind-Value="Tentativa" placeholder="Digite o nome do album"/>
<button @onclick="VerificarTentativa">Enviar</button>

<ul>
    @foreach (var tentativa in Tentativas)
    {
        <li>@tentativa</li>
    }
</ul>

@if (Mensagem != null)
{
    <p>@Mensagem</p>
}


@if (albuns == null)
{
    <p>Carregando...</p>
    Console.WriteLine(albuns);
}
else
{
    <ul>
        @foreach (var album in albuns)
        {
            <li>@album.Nome - @album.Nome (@album.AlbumDate.ToShortDateString())</li>
        }
    </ul>
}

<p>GET id</p>

@code {
    private string Tentativa { get; set;} = "";
    private List<string> Tentativas { get; set; } = new();
    private string? AlbumSecreto { get; set; }
    private string? Mensagem { get; set; }
    private List<AlbumDto> albuns = new();
    private AlbumDto? albumSelecionado;

    private async Task BuscarAlbumPorId(int id)
    {
        try
        {
            var response = await Http.GetAsync($"api/album/{id}");
            if (response.IsSuccessStatusCode)
            {
                albumSelecionado = await response.Content.ReadFromJsonAsync<AlbumDto>();
            }
            else
            {
                albumSelecionado = null;
                Console.WriteLine($"Álbum com ID {id} não encontrado.");
            }
        }
        catch (Exception ex)
        {
            albumSelecionado = null;
            Console.WriteLine($"Erro ao buscar álbum: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            albuns = await Http.GetFromJsonAsync<List<AlbumDto>>("api/Album") ?? new List<AlbumDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar álbuns: {ex.Message}");
        }
    }

    protected override void OnInitialized()
    {
        var albuns = new List<string> { "Sobrevivendo no Inferno", "Amarelo"};
        AlbumSecreto = albuns[new Random().Next(albuns.Count)];
    }

    private async Task VerificarTentativa()
    {
        if (string.IsNullOrWhiteSpace(Tentativa))
        {
            Mensagem = "Digite um nome antes de enviar!!";
            return;
        }

        Tentativas.Add(Tentativa);

        if (Tentativa.Equals(AlbumSecreto, StringComparison.OrdinalIgnoreCase))
        {
            Mensagem = "Voce acertou";
        }
        else
        {
            Mensagem = $"Tente Novamente. Voce digitou {Tentativa}";
        }

        Tentativa = "";
        await InvokeAsync(StateHasChanged);
    }
}
